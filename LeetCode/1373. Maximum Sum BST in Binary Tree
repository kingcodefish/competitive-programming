/**
 * Definition for a binary tree node.
 * struct TreeNode {
 *     int val;
 *     TreeNode *left;
 *     TreeNode *right;
 *     TreeNode(int x) : val(x), left(NULL), right(NULL) {}
 * };
 */
class Solution {
private:
    std::unordered_map<TreeNode*, int> sumCache;
    std::unordered_map<TreeNode*, bool> bstCache;
public:
    bool isBST(TreeNode* root)
    {
        bool childBST = false;
        if(bstCache.find(root) == bstCache.end())
        {
            if(root->left)
            {
                if(root->left->val >= root->val)
                {
                    bstCache.insert(std::pair<TreeNode*, bool>(root, false));
                    return false;
                }
                else
                {
                    childBST = isBST(root->left);
                    if(!childBST)
                    {
                        bstCache.insert(std::pair<TreeNode*, bool>(root->left, false));
                        return false;
                    }
                    else
                        bstCache.insert(std::pair<TreeNode*, bool>(root->left, true));
                }
            }
            if(root->right)
            {
                if(root->right->val <= root->val)
                {
                    bstCache.insert(std::pair<TreeNode*, bool>(root, false));
                    return false;
                }
                else
                {
                    childBST = isBST(root->right);
                    if(!childBST)
                    {
                        bstCache.insert(std::pair<TreeNode*, bool>(root->right, false));
                        return false;
                    }
                    else
                        bstCache.insert(std::pair<TreeNode*, bool>(root->right, true));
                }
            }

            if(root->left && bstCache[root->left])
            {
                TreeNode* rightmost = root->left;
                while(rightmost->right != nullptr)
                    rightmost = rightmost->right;
                if(rightmost->val >= root->val)
                {
                    bstCache.insert(std::pair<TreeNode*, bool>(root, false));
                    return false;
                }
            }
            if(root->right && bstCache[root->right])
            {
                TreeNode* leftmost = root->right;
                while(leftmost->left != nullptr)
                    leftmost = leftmost->left;
                if(leftmost->val <= root->val)
                {
                    bstCache.insert(std::pair<TreeNode*, bool>(root, false));
                    return false;
                }
            }

            bstCache.insert(std::pair<TreeNode*, bool>(root, true));
            return true;
        }
        else
        {
            return bstCache[root];
        }
    }
    int sum(TreeNode* root)
    {
        if(sumCache.find(root) == sumCache.end())
        {
            int total = root->val;
            if(root->left)
                total += sum(root->left);
            if(root->right)
                total += sum(root->right);
            sumCache.insert(std::pair<TreeNode*, int>(root, total));
            return total;
        }
        else
        {
            return sumCache[root];
        }
    }
    int maxSum(TreeNode* root)
    {
        sum(root);
        int max = 0;
        for(auto i : sumCache)
            if(i.second > max)
                max = i.second;
        return max;
    }
    int maxSumBST(TreeNode* root)
    {
        int maximSum = 0;
        int childSum = 0;

        if(isBST(root))
        {
            maximSum = maxSum(root);
        }
        else
        {
            if(root->left)
            {
                childSum = maxSumBST(root->left);
                if(childSum > maximSum)
                    maximSum = childSum;
            }
            if(root->right)
            {
                childSum = maxSumBST(root->right);
                if(childSum > maximSum)
                    maximSum = childSum;
            }
        }

        return maximSum;

    }
};
