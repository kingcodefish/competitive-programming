/*
// Definition for a Node.
class Node {
public:
    int val;
    vector<Node*> children;

    Node() {}

    Node(int _val) {
        val = _val;
    }

    Node(int _val, vector<Node*> _children) {
        val = _val;
        children = _children;
    }
};
*/
class Solution {
public:
    // Reverse BFS
    vector<int> postorder(Node* root) {
        if(root == nullptr)
            return {};

        stack<Node*> nodes;
        vector<int> traversal;
        nodes.push(root);

        Node* curr;
        while(!nodes.empty())
        {
            curr = nodes.top();
            nodes.pop();
            traversal.push_back(curr->val);

            for(int i = 0; i < curr->children.size(); ++i)
                nodes.push(curr->children[i]);
        }
        reverse(begin(traversal), end(traversal));
        return traversal;
    }
};
